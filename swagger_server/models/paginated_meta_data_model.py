# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PaginatedMetaDataModel(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, total: int=None, page: int=None, size: int=None):  # noqa: E501
        """PaginatedMetaDataModel - a model defined in Swagger

        :param total: The total of this PaginatedMetaDataModel.  # noqa: E501
        :type total: int
        :param page: The page of this PaginatedMetaDataModel.  # noqa: E501
        :type page: int
        :param size: The size of this PaginatedMetaDataModel.  # noqa: E501
        :type size: int
        """
        self.swagger_types = {
            'total': int,
            'page': int,
            'size': int
        }

        self.attribute_map = {
            'total': 'total',
            'page': 'page',
            'size': 'size'
        }
        self._total = total
        self._page = page
        self._size = size

    @classmethod
    def from_dict(cls, dikt) -> 'PaginatedMetaDataModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PaginatedMetaDataModel of this PaginatedMetaDataModel.  # noqa: E501
        :rtype: PaginatedMetaDataModel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total(self) -> int:
        """Gets the total of this PaginatedMetaDataModel.


        :return: The total of this PaginatedMetaDataModel.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total: int):
        """Sets the total of this PaginatedMetaDataModel.


        :param total: The total of this PaginatedMetaDataModel.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    @property
    def page(self) -> int:
        """Gets the page of this PaginatedMetaDataModel.


        :return: The page of this PaginatedMetaDataModel.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page: int):
        """Sets the page of this PaginatedMetaDataModel.


        :param page: The page of this PaginatedMetaDataModel.
        :type page: int
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")  # noqa: E501

        self._page = page

    @property
    def size(self) -> int:
        """Gets the size of this PaginatedMetaDataModel.


        :return: The size of this PaginatedMetaDataModel.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size: int):
        """Sets the size of this PaginatedMetaDataModel.


        :param size: The size of this PaginatedMetaDataModel.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size
